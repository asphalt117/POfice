@model IEnumerable<Domain.Entities.OrderV>

@*@{
    ViewBag.Title = "Заказы";
}*@

<p>
    @Html.ActionLink("Создать новый", "Create", null,
                new
                {
                    @class = "actionButtons btn btn-default btn-success",
                    @role = "button",
                    @title = "Создать новый"
                })
</p>
<table align="center" class="table table-hover table-bordered table-grey-header">
    <thead>
        <tr>
            @if (ViewBag.Title == "Заказы")
            {
                <th>
                    № Заказа
                </th>
            }
            <th>
                @Html.DisplayNameFor(model => model.Dat)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Good)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Adres)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Contract)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Note)
            </th>
            <th>
                Управление
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                @if (ViewBag.Title == "Заказы")
                {
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderId)
                    </td>
                }
                <td>
                    @Html.DisplayFor(modelItem => item.Dat)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Good)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Adres)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Contract)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Note)
                </td>
                <td>
                    @if (item.StatusId==1)
                    { 
                        @Html.ActionLink(HttpUtility.HtmlDecode("&#xe065;"), "Edit", new { id = item.OrderId }, new { @class = "actionButtons btn btn-xs-sm-md btn-default glyphicon glyph-btn", @role = "button", @title = "Редактировать заказ" })
                        @Html.ActionLink(HttpUtility.HtmlDecode("&#xe020;"), "Delete", new { id = item.OrderId }, new { @class = "actionButtons btn btn-xs-sm-md btn-default glyphicon glyph-btn", @role = "button", @title = "Удалить заказ" })
                    }
                    @Html.ActionLink(HttpUtility.HtmlDecode("&#xe224;"), "Copy", new { id = item.OrderId }, new { @class = "actionButtons btn btn-xs-sm-md btn-default glyphicon glyph-btn", @role = "button", @title = "Копировать заказ" })
                </td>
            </tr>
        }
    </tbody>
</table>
    
    
    
    
    
    
    
    @*@{
        var editLink = Html.ActionLink("{0}", "Edit", "Order", new { id = item.OrderId }, new { @class = "actionButtons btn btn-xs-sm-md btn-default", @role = "button", @title = "Редактировать заказ" }).ToString();
        var copyLink = Html.ActionLink("{0}", "Copy", "Order", new { id = item.OrderId }, new { @class = "actionButtons btn btn-xs-sm-md btn-default", @role = "button", @title = "Копировать заказ" }).ToString();
        var deleteLink = Html.ActionLink("{0}", "Delete", "Order", new { id = item.OrderId }, new { @class = "actionButtons btn btn-xs-sm-md btn-default", @role = "button", @title = "Удалить заказ" }).ToString();
        var editInnerHtml = "<span class=\"glyphicon glyphicon-edit glyph-btn\"></span>";
        var copyInnerHtml = "<span class=\"glyphicon glyphicon-duplicate glyph-btn\"></span>";
        var deleteInnerHtml = "<span class=\"glyphicon glyphicon-trash glyph-btn\"></span>";
        var editLinkText = string.Format(editLink, editInnerHtml);
        var copyLinkText = string.Format(copyLink, copyInnerHtml);
        var deleteLinkText = string.Format(deleteLink, deleteInnerHtml);
    }

    @Html.Raw(editLinkText)
    @Html.Raw(copyLinkText)
    @Html.Raw(deleteLinkText)*@